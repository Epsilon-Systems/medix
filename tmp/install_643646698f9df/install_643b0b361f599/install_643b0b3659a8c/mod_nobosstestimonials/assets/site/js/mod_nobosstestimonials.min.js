jQuery(document).ready(function( jQuery ) {
    // Declara $ para evitar conflito
    $ = jQuery;
    // Scripts que são necessários estarem carregados na página
    var scripts = [
		baseNameUrl + "modules/mod_nobosstestimonials/assets/site/js/owl.carousel-2.3.4.min.js"
    ];
    // Carrega os scripts que ainda não estão na página
    var queue = scripts.map(function (script) {
        if (script.slice(-2) === 'js' && jQuery("script[src*='" + script.slice(-30) + "']").length === 0) {
            return jQuery("head").append('<script type="text/javascript" src="' + script + '"></script>');
        } else if (script.slice(-3) === 'css' && jQuery("link[href*='" + script.slice(-30) + "']").length === 0) {
            return jQuery("head").append('<link rel="stylesheet" href="' + script + '"/>');
        }
    });
    // Adiciona o script do youtube separado porque não tem .js no final
    queue.push(jQuery("head").append('<script type="text/javascript" src="https://www.youtube.com/player_api"></script>'));

    // Todos scripts necessário estão carregados
    jQuery.when.apply(null, queue).done(function () {
        // Executa somente apos estar carregada biblioteca owlCarouselNB na pagina
        (function() {
            var nTimer = setInterval(function() {
                if (jQuery().owlCarouselNB != undefined) {                    
                    clearInterval(nTimer);
                    testimonials.CONSTRUCTOR();
                }
            }, 50);
        })();
    });
});

// Cria objeto para armazenar funções.
var testimonials = {};

testimonials.CONSTRUCTOR = function(){

	// Pega todos os escopos de módulos No Boss Testimonials.
	var scopeModules = jQuery("[module-id^='nobosstestimonials_']");
	// Percorre todos os módulos de depoimentos na página
	scopeModules.each(function(){
		var testimonialModule = jQuery(this);

		var moduleId = jQuery(this).attr("module-id");
		// Pega as configurações de js do módulo atual
		var jsConfig = moduleList[moduleId];
		
        var testimonialsList = jQuery(this).find('[data-list]');

        var slider = jQuery();

        // jQuery(testimonialsList).find('.testimonials-content--video').on('click', '.nb-embed-responsive', function(){
        //     // para o autoplay do carousel
        //     jQuery(testimonialsList).trigger('stop.autoplay.owl');

        //     var that = jQuery(this);
        //     var playerElement = jQuery('<div>').attr('id', 'player');

        //     jQuery(this).append(playerElement);

        //     window.onYouTubeIframeAPIReady = function () {
        //         var player = new YT.Player('player', {
        //         height: '360',
        //         width: '640',
        //         videoId: that.attr('data-video-id'),
        //         events: {
        //             'onReady': function () {
        //                 player.playVideo();
        //             }
        //         }});
        //     }();
        // });

		// Valida se é do modelo 1
		if (testimonialModule.hasClass('nobosstestimonials--model1') && testimonialsList.find('[data-id-testimonial]').length > 1){

			// Ativa o plugin de slider
			slider = testimonialsList.owlCarouselNB({
				loop: true, // Os depoimentos serão infinitos
				items: 1, // Itens exibidos por vez,
				autoplay: jsConfig.autoPlay,
				autoplayTimeout: jsConfig.autoPlayInterval,
				dots: jsConfig.showDots, // Pega a a configuração do objeto js para saber se tem dots ou não
				dotsContainer: '.'+moduleId+'--dots', // Define o container onde serão gerado os dots
				dotClass: 'dot', // Classe que cada dot individual terá
				mouseDrag: false
            });

            var videoItems = testimonialsList.find('.testimonials-content--video');
            // caso tenha itens de video
            if(videoItems.length){
                // quando clicar nos dots
                jQuery('[data-id=nb-nav-dots], [data-navigation-direction]').on('click', function(){
                    // procura os iframes e para cada um
                    testimonialsList.find('iframe').each(function(){
                        // pega a src
                        var src = jQuery(this).attr('src');
                        // atualiza para que o video seja recarregado
                        jQuery(this).attr('src', src);
                    });
                });
            }

			slider.on('next.owl.carousel prev.owl.carousel drag.owl.carousel dragged.owl.carousel', function(event){
                // Pega o escopo onde está o elemento.
				var contextTestimonials = jQuery(this).closest('[module-id^="nobosstestimonials_"]');

				var distanceToLoad = 4;
				
				var unloadadedTestimonialsNext = {};
				if (event.type === 'next' || event.type === 'drag' || event.type === 'dragged'){
					// Pega os próximos 3 elementos depois do ultimo ativo e carraga eles
					unloadadedTestimonialsNext = contextTestimonials.find('[data-list]').find('.owl-item.active').nextAll(':not(.cloned)').slice(0, distanceToLoad);

					// Verifica se conseguiu o total que preciisavam seção pega os ultimos
					if (distanceToLoad - unloadadedTestimonialsNext.length > 0) {
						notClonnedItens = contextTestimonials.find('[data-list]').find('.owl-item:not(.cloned)');
						jQuery.extend(unloadadedTestimonialsNext, notClonnedItens.slice(0, distanceToLoad - unloadadedTestimonialsNext.length));
					}
				}
				
				var unloadadedTestimonialsPrev = {};
				if (event.type === 'prev' || event.type === 'drag' || event.type === 'dragged') {
					// Pega os próximos 3 elementos depois do ultimo ativo e carraga eles
					unloadadedTestimonialsPrev = contextTestimonials.find('[data-list]').find('.owl-item.active').prevAll(':not(.cloned)').slice(0, distanceToLoad);

					// Verifica se conseguiu o total que preciisavam seção pega os ultimos
					if (distanceToLoad - unloadadedTestimonialsPrev.length > 0){
						notClonnedItens = contextTestimonials.find('[data-list]').find('.owl-item:not(.cloned)');
						jQuery.extend(unloadadedTestimonialsPrev, notClonnedItens.slice(notClonnedItens.length - distanceToLoad, notClonnedItens.length));
					}
				}

				var unloadadedTestimonials = {};
				// Junta em um unico objeto
				jQuery.extend(unloadadedTestimonials, unloadadedTestimonialsNext, unloadadedTestimonialsPrev);

				// Percorre os elementos verificando se eles já foram carregados
				unloadadedTestimonials.each(function(){
					if(jQuery(this).children().data('loaded') === false){ // jshint ignore:line
						// Atualiza depoimento.
						testimonials.loadTestimonial(jQuery(this).children());
					}
				});
			});
            
		} else {
			if (testimonialsList.find('[data-id-testimonial]').length > 3){
				if(!testimonialsList.hasClass('testimonials--vertical')){
					// Ativa o plugin de slider
					slider = testimonialsList.owlCarouselNB({
						center: true, // Terá um item centralizado
						loop: true, // Os depoimentos serão infinitos
						items: 3, // Itens exibidos por vez
						margin: 20, // Margem entre os itens
						autoplayHoverPause: true,
						autoplay: jsConfig.autoPlay,
						autoplayTimeout: jsConfig.autoPlayInterval,
						dots: jsConfig.showDots, // Pega a a configuração do objeto js para saber se tem dots ou não
						dotsContainer: '.' + moduleId + '--dots', // Define o container onde serão gerado os dots
						dotClass: 'dot', // Classe que cada dot individual terá
						mouseDrag: jsConfig.mouseDrag,
						responsive: {
							991: {
								items: 3 // Tamanho de tela acima de 991 terá 3 itens
							},
							768: {
								items: 2, // Acima de 768 terá dois itens
								center: false // E eles não estarão centralizados
							},
							0: {
								items: 1 // Acima de 0, ou seja, mobile, terá um item
							}
							
						}
					});
				}
			}
		}
		
		// Evento de clique em uma das setas
		jQuery(this).find('[data-navigation-direction]').on('click', function(e){
			e.preventDefault();

			var that =  jQuery(this);
			// verifica se foi para a direita ou esquerda
			if (jQuery(this).data('navigation-direction') === 'right') {
				slider.trigger('next.owl.carousel');
			} else if (jQuery(this).data('navigation-direction') === 'left') {
				slider.trigger('prev.owl.carousel');
			}
			
			// Caso seja o modelo 1, dá um delei para evitar multiplos cliques na seta
			if (testimonialModule.hasClass('nobosstestimonials--model1')){
				// Desativa o clique
				jQuery(this).css("pointer-events", "none");

				// Reativa o clique dps de alguns milisegundos
				setTimeout(function() {
					jQuery(that).css("pointer-events", "auto");
				}, 200);
			}
		});

    });

    jQuery(window).resize(function(){
        jQuery('[data-list]').each(function(){
            if(jQuery(this).find('.testimonials-content--video').length){
                var autoplayStopped = jQuery(this).hasClass('autoplaystopped');
                if(jsConfig.autoPlay){
                    if(autoplayStopped){
                        testimonials.stopVideo(jQuery(this));
                    }
                }
            }
        });
    });
};

// Evento de click no elemento com atributo "data-navigation".
testimonials.testimonialsModel1 = function(e){
	// Previne comportamento padrão do evento.
	e.preventDefault();
	// Pega o elemento.
	var element = jQuery(this);
	// Pega o escopo onde está o elemento.
	var contextTestimonials = element.closest("[module-id^='nobosstestimonials_']");
	// Pega o id do depoimento no scope do módulo No Boss Testimonials.
	var testimonial = contextTestimonials.find("[data-id-testimonial]");
	// Variável que guarda o id do depoimento.
	var idTestimonial;

	// Verifica se existe elemento com atributo de "data-id-testimonial".
	if (testimonial.length > 0) {
		// Pega o id do depoimento.
		idTestimonial = testimonial.attr("data-id-testimonial");
	} else {
		// Não existe elemento com atributo de "data-id-testimonial" no escopo do módulo.
		// Termina o script.
		return false;
	}

	// Direção da navegação.
	var navigationDirection = element.attr('data-navigation-direction');

	// Verifica se o "direção da navegação" não é valida ("right ou left").
	if (typeof navigationDirection == "undefined" || (navigationDirection != "right" && navigationDirection != "left")) {
		// Não existe elemento com atributo de "data-navigation-direction" no elemento clicado.
		// Termina o script.
		return false;
	}

	// Atualiza depoimento.
	testimonials.updateTestimonial(contextTestimonials, idTestimonial, navigationDirection);
};

/**
 * Função que carrega um depoimento e substitui pelo item de referência
 * 
 * @param {jQuery Object} testimonialRef Objeto de referência onde o depoimento será carregado
 *
 * @returns {Void} 
 */
testimonials.loadTestimonial = function (testimonialRef){
	// Dados enviados para requisição.
	var data = {
		"id" : testimonialRef.data('id-testimonial')
	};

	// Transforma dados em uma string para envio via requisição ajax.
	data = JSON.stringify(data);

	// Configuração da requisição ajax para o módulo "nobosstestimonials".
	var request = {
		'option': 'com_ajax',
		'module': 'nobosstestimonials',
		'data': data,
		'method': 'loadTestimonial',
		'format': 'raw'
	};

	// Atualiza o depoimento.
	jQuery.ajax({
		type: 'GET',
		data: request,
		success: function (testimonialResponse) {
			// Pega o data-id do elemento que será substituido pelo testimonail
			var testimonialDataId = testimonialRef.data('id');
			// Faz a substituição da div vazia pelo novo depoimento vindo do ajax
			var newTestimonial = jQuery(testimonialRef).replaceWith(testimonialResponse);
			// Seta o data-id do elemento que foi substituido
			jQuery(newTestimonial).data('id', testimonialDataId);
		}
	});
};
